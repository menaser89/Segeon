#!/usr/bin/env node

var path = require('path'),
    _ = require('underscore'),
    exec = require('child_process').exec,
    fs = require('fs'),
    http = require('http'),
    connect = require('connect'),
    url = require('url'),
    port = process.env.INSPECTOR_PORT || 8090,
    cwd = process.cwd();

module.exports = function(config) {
  config = _.defaults(config || {}, {
    editor: "subl",
    paths: {
      views: "./js/views",
      models: "./js/models",
      collections: "./js/collections",
      templates: "./templates"
    }
  });

  // relativize paths
  _.each(config.paths, function(value, key) {
    config.paths[key] = path.join(cwd, value);
  });

  var server = connect();
  server.use(connect.bodyParser());

  console.log("Starting thorax-inspector with config:");
  console.log(JSON.stringify(config, null, "  "));

  function pathFromRequest(request) {
    var query = url.parse(request.url, true).query;
    return path.join(config.paths[query.type], query.path);
  }

  server.use(function(request, response) {
    if (request.url === '/ping') {
      response.end('');
    } else if (request.url === '/exists') {
      response.end(String(fs.existsSync(pathFromRequest(request))));
    } else if (request.url === '/exists-batch') {
      response.end(JSON.stringify(request.body.files.map(function(file) {
        console.log(file.type + ' checking: ' + path.join(config.paths[file.type], file.name));
        return {
          type: file.type,
          name: file.name,
          exists: fs.existsSync(path.join(config.paths[file.type], file.name))
        };
      })));
    } else if (request.url.match(/^\/open/)) {
      exec(config.editor + " " + pathFromRequest(request));
    }
  });

  http.createServer(server).listen(port);

  console.log("thorax-inspector listening on port " + port);
};

